package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
	tb "gopkg.in/tucnak/telebot.v2"
)

type GPTResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
}

func main() {
	telegramToken := os.Getenv("BOT_TOKEN")
	channelID := os.Getenv("CHANNEL_ID") // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º ID –∫–∞–Ω–∞–ª–∞

	b, err := tb.NewBot(tb.Settings{
		Token:  telegramToken,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Fatal(err)
		return
	}

	b.Handle("/start", func(m *tb.Message) {
		b.Send(m.Sender, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é —Å —Å–∞–π—Ç–∞ Shazoo.ru.")
	})

	b.Handle(tb.OnText, func(m *tb.Message) {
		url := m.Text
		if strings.Contains(url, "shazoo.ru") {
			content, title, imageURL, err := fetchArticleData(url)
			if err != nil {
				b.Send(m.Sender, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏.")
				return
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
			rewrittenText, err := sendToAI(content)
			if err != nil {
				b.Send(m.Sender, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏.")
				return
			}

			// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç—å–∏
			image, err := downloadImage(imageURL)
			if err != nil {
				b.Send(m.Sender, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
				return
			}

			// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
			post := fmt.Sprintf("üëæ <b>%s</b>\n<i>%s</i>\n--------\n%s", title, rewrittenText, "–î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ—Ç —Å–µ–±—è:")
			b.Send(m.Sender, post, &tb.SendOptions{ParseMode: tb.ModeHTML})

			b.Handle(tb.OnText, func(m *tb.Message) {
				finalPost := post + "\n" + m.Text
				b.Send(m.Sender, "–í–æ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Å—Ç:\n"+finalPost, &tb.SendOptions{ParseMode: tb.ModeHTML})

				publishButton := tb.InlineButton{
					Unique: "publish",
					Text:   "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
				}
				editButton := tb.InlineButton{
					Unique: "edit",
					Text:   "–ò—Å–ø—Ä–∞–≤–∏—Ç—å",
				}
				b.Handle(&publishButton, func(c *tb.Callback) {
					b.Send(m.Sender, "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
					chatID, _ := strconv.ParseInt(channelID, 10, 64)
					photo := &tb.Photo{
						File:    tb.FromReader(bytes.NewReader(image)),
						Caption: finalPost,
					}
					b.Send(tb.ChatID(chatID), photo, &tb.SendOptions{ParseMode: tb.ModeHTML})
				})
				b.Handle(&editButton, func(c *tb.Callback) {
					b.Send(m.Sender, "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
					b.Handle(tb.OnText, func(m *tb.Message) {
						finalPost = post + "\n" + m.Text
						b.Send(m.Sender, "–í–æ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Å—Ç:\n"+finalPost, &tb.SendOptions{ParseMode: tb.ModeHTML})
					})
				})

				b.Send(m.Sender, "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –ò—Å–ø—Ä–∞–≤–∏—Ç—å?", &tb.ReplyMarkup{InlineKeyboard: [][]tb.InlineButton{{publishButton, editButton}}})
			})
		} else {
			b.Send(m.Sender, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é —Å —Å–∞–π—Ç–∞ Shazoo.ru.")
		}
	})

	b.Start()
}

func fetchArticleData(url string) (string, string, string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", "", "", err
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return "", "", "", err
	}

	content := doc.Find("section.Entry__content").Text()
	title := doc.Find("article section h1").Text()
	imageURL, exists := doc.Find("figure img.w-full").Attr("src")
	if !exists {
		return "", "", "", fmt.Errorf("image not found")
	}

	return content, title, imageURL, nil
}

func sendToAI(content string) (string, error) {
	thebAiAPIKey := os.Getenv("THEB_API_KEY")

	requestBody, err := json.Marshal(map[string]interface{}{
		"model": "gpt-3.5-turbo",
		"messages": []map[string]string{
			{"role": "user", "content": fmt.Sprintf("–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ–∫—Ä–∞—Ç–∏–≤ –µ–≥–æ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ: %s", content)},
		},
	})
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", "https://api.theb.ai/v1/chat/completions", bytes.NewBuffer(requestBody))
	if err != nil {
		return "", err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", thebAiAPIKey))

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	fmt.Println("Response Body:", string(body))

	var gptResponse GPTResponse
	if err := json.NewDecoder(bytes.NewBuffer(body)).Decode(&gptResponse); err != nil {
		return "", err
	}

	if len(gptResponse.Choices) == 0 {
		return "", fmt.Errorf("no choices in GPT response")
	}

	return gptResponse.Choices[0].Message.Content, nil
}

func downloadImage(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return io.ReadAll(resp.Body)
}
